name: 🐍 Python Lint + 🤖 Auto-Approve PR

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  lint-and-approve:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
      fail-fast: false

    steps:
      # 1️⃣ Checkout the PR branch
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          persist-credentials: false

      # 2️⃣ Setup Python
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3️⃣ Install dependencies
      - name: ⬆️ Install Pylint and Reviewdog
        run: |
          python -m pip install --upgrade pip
          pip install pylint reviewdog

      # 4️⃣ Detect changed Python files reliably
      - name: 🔍 Detect changed Python files
        id: detect
        run: |
          # Get all changed Python files in the PR compared to base branch
          files=$(git fetch origin ${{ github.base_ref }} && \
                  git diff --name-only origin/${{ github.base_ref }}...${{ github.head_ref }} | grep '\.py$' || true)
          if [ -z "$files" ]; then
            echo "no_python_files=true" >> $GITHUB_OUTPUT
          else
            echo "no_python_files=false" >> $GITHUB_OUTPUT
            echo "files=$files" >> $GITHUB_OUTPUT
          fi

      # 5️⃣ Skip lint if no Python files
      - name: ✅ Skip lint if no Python files
        if: steps.detect.outputs.no_python_files == 'true'
        run: echo "✨ No Python files changed. Skipping lint."

      # 6️⃣ Run Pylint with Reviewdog
      - name: 🚦 Run Pylint + Reviewdog
        if: steps.detect.outputs.no_python_files == 'false'
        run: |
          set +e  # disable exit-on-error
          echo "🔎 Linting changed files:"
          echo "${{ steps.detect.outputs.files }}"
          pylint ${{ steps.detect.outputs.files }} --output-format=parseable > pylint.log 2>&1 || true

          # Reviewdog posts inline comments in PR
          reviewdog -f=pylint -name="Pylint" -reporter=github-pr-review -level=error < pylint.log

      # 7️⃣ Auto-approve if no lint issues
      - name: 🤖 Auto-approve PR
        if: steps.detect.outputs.no_python_files == 'false' && success()
        run: |
          if [ -s pylint.log ]; then
            echo "❌ Lint errors detected. Skipping auto-approve."
            exit 1
          else
            echo "✅ Lint passed. Auto-approving PR..."
            gh pr review ${{ github.event.pull_request.number }} --approve --body "Auto-approved"
        env:
          GITHUB_TOKEN: ${{ secrets.INFOYOUTH_PAT }}
