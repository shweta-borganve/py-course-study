name: 🐍 Pylint + 🤖 Auto Approve PR

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    outputs:
      lint_passed: ${{ steps.lint-status.outputs.lint_passed }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          persist-credentials: false

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 🔄 Fetch base branch
        run: git fetch origin ${{ github.base_ref }}

      - name: 🔍 Get changed Python files
        id: changed-files
        run: |
          files=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.head_ref }} | grep '\.py$' || true)
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📝 Check if Python files changed
        id: has-py
        run: |
          if [ -z "${{ steps.changed-files.outputs.files }}" ]; then
            echo "no_py_files=true" >> $GITHUB_OUTPUT
          else
            echo "no_py_files=false" >> $GITHUB_OUTPUT
          fi

      - name: ✅ No Python files to lint
        if: steps.has-py.outputs.no_py_files == 'true'
        run: echo "✨ No Python files changed in this PR. All clear! ✨"

      - name: ⬆️ Install dependencies
        if: steps.has-py.outputs.no_py_files == 'false'
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: 🚦 Run Pylint
        id: run-pylint
        run: |
          echo "🔎 Running Pylint on changed files: example.py"
          pylint example.py --output-format=parseable > pylint.log 2>&1
          if [ -s pylint.log ]; then
            echo "❌ Lint issues found!"
            cat pylint.log
            exit 1  # Step fails here
          else
            echo "✅ No lint issues found!"
          fi
      
      - name: 📤 Upload Pylint log
        if: always()   # This runs even if previous step failed
        uses: actions/upload-artifact@v4
        with:
          name: pylint-log
          path: pylint.log
      
      - name: 🏁 Set Lint Status Output
        id: lint-status
        if: always()  # Always runs
        run: |
          if [ -s pylint.log ]; then
            echo "lint_passed=false" >> $GITHUB_OUTPUT
          else
            echo "lint_passed=true" >> $GITHUB_OUTPUT

  lint-aggregate:
    runs-on: ubuntu-latest
    needs: pylint
    outputs:
      all_passed: ${{ steps.check.outputs.all_passed }}
    steps:
      - name: Check matrix results
        id: check
        run: |
          all_passed=true
          for job in ${{ toJson(needs.pylint) }}; do
            passed=$(echo "$job" | jq -r '.outputs.lint_passed')
            if [ "$passed" != "true" ]; then
              all_passed=false
              break
            fi
          done
          echo "all_passed=$all_passed" >> $GITHUB_OUTPUT

      - name: 🤖 Trigger Gemini AI Review if any failed
        if: steps.check.outputs.all_passed == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: "/gemini-review"
          token: ${{ secrets.GITHUB_TOKEN }}

  auto-approve:
    runs-on: ubuntu-latest
    needs: lint-aggregate
    if: needs.lint-aggregate.outputs.all_passed == 'true'
    permissions:
      pull-requests: write
    steps:
      - name: 🤖 Auto-approve PR
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.INFOYOUTH_PAT }}
